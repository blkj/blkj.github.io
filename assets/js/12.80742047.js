(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{215:function(e,n,a){"use strict";a.r(n);var r=a(0),s=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),a("p",[e._v("vue-cli是vue提供构建单页应用的脚手架。它能够帮助开发者快速的创建vue项目。这篇文章主要介绍如何使用vue-cli，以及它创建的vue项目结构。还有就是对于build目录下的配置文件进行一些梳理总结。")]),e._v(" "),a("h2",{attrs:{id:"安装vue-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装vue-cli","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装vue-cli")]),e._v(" "),a("p",[e._v("安装vue-cli十分简单，执行下面的命令即可")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install -g vue-cli\n")])])]),a("p",[e._v("之后可以通过"),a("code",[e._v("vue list")]),e._v("来查看可以使用哪些模板\n"),a("img",{attrs:{src:"https://segmentfault.com/img/bVSSXu?w=1374&h=326",alt:"图片描述"}})]),e._v(" "),a("h2",{attrs:{id:"创建vue项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建vue项目","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建vue项目")]),e._v(" "),a("p",[e._v("通过vue-cli创建一个vue项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vue init webpack <your project>\n")])])]),a("p",[e._v("之后进入你的项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd <your project>\n")])])]),a("p",[e._v("通过npm安装依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install\n")])])]),a("p",[e._v("启动项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run dev\n")])])]),a("p",[e._v("之后我们就看到项目启动了\n"),a("img",{attrs:{src:"https://segmentfault.com/img/bVSS0S?w=1936&h=1186",alt:"图片描述"}})]),e._v(" "),a("p",[e._v("打包项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run build\n")])])]),a("h2",{attrs:{id:"vue项目结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue项目结构","aria-hidden":"true"}},[e._v("#")]),e._v(" vue项目结构")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("├── build --------------------------------- webpack相关配置文件\n│   ├── build.js --------------------------webpack打包配置文件\n│   ├── check-versions.js ------------------------------ 检查npm,nodejs版本\n│   ├── dev-client.js ---------------------------------- 设置环境\n│   ├── dev-server.js ---------------------------------- 创建express服务器，配置中间件，启动可热重载的服务器，用于开发项目\n│   ├── utils.js --------------------------------------- 配置资源路径，配置css加载器\n│   ├── vue-loader.conf.js ----------------------------- 配置css加载器等\n│   ├── webpack.base.conf.js --------------------------- webpack基本配置\n│   ├── webpack.dev.conf.js ---------------------------- 用于开发的webpack设置\n│   ├── webpack.prod.conf.js --------------------------- 用于打包的webpack设置\n├── config ---------------------------------- 配置文件\n├── node_modules ---------------------------- 存放依赖的目录\n├── src ------------------------------------- 源码\n│   ├── assets ------------------------------ 静态文件\n│   ├── components -------------------------- 组件 \n│   ├── main.js ----------------------------- 主js\n│   ├── App.vue ----------------------------- 项目入口组件\n│   ├── router ------------------------------ 路由\n├── package.json ---------------------------- node配置文件\n├── .babelrc--------------------------------- babel配置文件\n├── .editorconfig---------------------------- 编辑器配置\n├── .gitignore------------------------------- 配置git可忽略的文件\n")])])]),a("h2",{attrs:{id:"主要的配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要的配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 主要的配置文件")]),e._v(" "),a("p",[e._v("首选来看一下"),a("code",[e._v("package.json")]),e._v("里面"),a("code",[e._v("scripts")]),e._v("字段，看一下在执行"),a("code",[e._v("npm run dev")]),e._v(" 和"),a("code",[e._v("npm run build")]),e._v("时做了什么")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' "name": "wheelsfactory",\n  "version": "1.0.0",\n  "description": "轮子工厂--一个分享优秀的vue,angular组件的网站 http://www.wheelsfactory.cn",\n  "scripts": {\n        "dev": "node build/dev-server.js",\n        "start": "node build/dev-server.js",\n        "build": "node build/build.js"\n  }\n')])])]),a("p",[e._v("当我们执行"),a("code",[e._v("npm run dev")]),e._v("时，首选执行的是"),a("code",[e._v("dev-server.js")]),e._v("\n当我们执行"),a("code",[e._v("npm run build")]),e._v("时，首选执行的是"),a("code",[e._v("build.js")])]),e._v(" "),a("h3",{attrs:{id:"dev-server-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dev-server-js","aria-hidden":"true"}},[e._v("#")]),e._v(" dev-server.js")]),e._v(" "),a("ul",[a("li",[e._v("引入配置文件")]),e._v(" "),a("li",[e._v("引入相关插件")]),e._v(" "),a("li",[e._v("创建express实例")]),e._v(" "),a("li",[e._v("配置webpack-dev-middleware和webpack-hot-middleware")]),e._v(" "),a("li",[e._v("配置静态资源路径，并挂到express服务上")]),e._v(" "),a("li",[e._v("启动服务器，并判断是否自动打开默认浏览器")]),e._v(" "),a("li",[e._v("监听端口")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("require('./check-versions')()\n//引入相关配置\nvar config = require('../config')\n// 检查Node的环境变量，如果没有则使用配置文件中设置的环境\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n \n//opn -- A better node-open. Opens stuff like websites, files, executables. Cross-platform.\n//这里用来打开默认浏览器，打开dev-server监听的端口\nvar opn = require('opn')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\n//express中间件，用于http请求代理到其他服务器\nvar proxyMiddleware = require('http-proxy-middleware')\n//判断当前环境，选择导入的webpack配置\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\n//默认的dev-server的监听端口\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\n//是否自动打开浏览器，默认是false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\n//定义http代理到你的自定义的API后端\nvar proxyTable = config.dev.proxyTable\n//创建express实例\nvar app = express()\n// 根据webpack的config创建Compiler对象\nvar compiler = webpack(webpackConfig)\n\n//使用compiler相应的文件进行编译和绑定，编译后的内容将存放在内存中\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n//用于实现热重载\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: false,\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\n//当html-webpack-plugin提交页面之后，使用热重载强制页面重载\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\n//在express上使用代理表中的配置\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\n//一个解决单页的重定向错误的插件\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\n// 使用devMiddleware，webpack编译后的文件将挂到express服务器上\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\n// 使用热重载中间件\napp.use(hotMiddleware)\n\n// serve pure static assets\n//配置静态资源路径\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\n//将静态文件挂到express服务器上\napp.use(staticPath, express.static('./static'))\n//设置应用的url\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\n//devMiddleware valid之后，启动服务\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  //如果设置为自动打开浏览器，通过opn打开uri\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n  _resolve()\n})\n//监听配置的端口\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n")])])]),a("h3",{attrs:{id:"webpack-base-conf-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-base-conf-js","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack.base.conf.js")]),e._v(" "),a("ul",[a("li",[e._v("配置编译入口和输出路径")]),e._v(" "),a("li",[e._v("模块resolve的规则")]),e._v(" "),a("li",[e._v("配置不同类型模块的处理规则")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var path = require('path')\nvar utils = require('./utils')\nvar config = require('../config')\nvar vueLoaderConfig = require('./vue-loader.conf')\n//绝对路径\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nmodule.exports = {\n  //webpack的入口文件\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n     //webpack输出文件的路径\n    path: config.build.assetsRoot,\n    //输出的文件命名格式\n    filename: '[name].js',\n    // webpack编译输出的发布路径\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  //模块resolve的规则\n  resolve: {\n    //resolve的后缀名\n    extensions: ['.js', '.vue', '.json'],\n    //配置路径别名，比如import Vue from 'vue/dist/vue.common.js'--\x3e import Vue from 'vue'\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    }\n  },\n  //配置不同类型模块的处理规则\n  module: {\n    rules: [\n    // src和test文件夹下的.js和.vue文件使用eslint-loader\n      {\n        test: /\\.(js|vue)$/,\n        loader: 'eslint-loader',\n        enforce: 'pre',\n        include: [resolve('src'), resolve('test')],\n        options: {\n          formatter: require('eslint-friendly-formatter')\n        }\n      },\n      //所有的.vue文件使用vue-loader\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      //src和test下的.js文件使用babel-loader\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      //所有的图片文件使用url-loader\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      //所有的音频文件使用url-loader\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      //所有的字体文件使用url-loader\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n}\n")])])]),a("h3",{attrs:{id:"webpack-dev-conf-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-conf-js","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack.dev.conf.js")]),e._v(" "),a("ul",[a("li",[e._v("合并基础的webpack配置")]),e._v(" "),a("li",[e._v("使用styleLoaders")]),e._v(" "),a("li",[e._v("配置Source Maps")]),e._v(" "),a("li",[e._v("配置webpack插件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var utils = require('./utils')\nvar webpack = require('webpack')\nvar config = require('../config')\nvar merge = require('webpack-merge')\nvar baseWebpackConfig = require('./webpack.base.conf')\n//生成html文件并自动注入依赖文件的插件， script & link\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n//一个输出webpack警告，错误的插件\nvar FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')\n\n// add hot-reload related code to entry chunks\n//添加热重载相关的代码到entry chunks\nObject.keys(baseWebpackConfig.entry).forEach(function (name) {\n  baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])\n})\n//合并webpack.base.conf\nmodule.exports = merge(baseWebpackConfig, {\n  module: {\n    //使用styleLoaders处理样式文件\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  // cheap-module-eval-source-map is faster for development\n  //配置Source Maps\n\n  devtool: '#cheap-module-eval-source-map',\n  //配置webpack插件\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': config.dev.env\n    }),\n    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage\n    new webpack.HotModuleReplacementPlugin(),\n    //在编译出现错误时，使用 NoEmitOnErrorsPlugin 来跳过输出阶段。这样可以确保输出资源不会包含错误。\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n    new FriendlyErrorsPlugin()\n  ]\n})\n")])])]),a("p",[e._v("** 配置Source Maps")]),e._v(" "),a("ul",[a("li",[e._v("source-map  在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source\nmap，但是它会减慢打包文件的构建速度；")]),e._v(" "),a("li",[e._v("cheap-module-source-map\n在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；")]),e._v(" "),a("li",[e._v("eval-source-map 使用eval打包源文件模块，在同一个文件中生成干净的完整的source\nmap。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；")]),e._v(" "),a("li",[e._v("cheap-module-eval-source-map  这是在打包文件时最快的生成source map的方法，生成的Source\nMap 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；")])]),e._v(" "),a("h3",{attrs:{id:"build-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-js","aria-hidden":"true"}},[e._v("#")]),e._v(" build.js")]),e._v(" "),a("ul",[a("li",[e._v("webpack编译")]),e._v(" "),a("li",[e._v("输出信息")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("require('./check-versions')()\nprocess.env.NODE_ENV = 'production'\n//控制台loading动画\nvar ora = require('ora')\nvar rm = require('rimraf')\nvar path = require('path')\n// 高亮控制台输出的插件\nvar chalk = require('chalk')\nvar webpack = require('webpack')\nvar config = require('../config')\nvar webpackConfig = require('./webpack.prod.conf')\n//在控制台输出building for production...\nvar spinner = ora('building for production...')\n//开始loading动画\nspinner.start()\n//获取输出文件路径\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => {\n  if (err) throw err\n  //webpack编译  \n  webpack(webpackConfig, function (err, stats) {\n    //停止loading动画\n    spinner.stop()\n    //如果错误抛出错误\n    if (err) throw err\n    //完成输出相关信息 \n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n")])])]),a("h3",{attrs:{id:"webpack-prod-conf-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-prod-conf-js","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack.prod.conf.js")]),e._v(" "),a("ul",[a("li",[e._v("合并基础的webpack配置")]),e._v(" "),a("li",[e._v("配置webpack的输出")]),e._v(" "),a("li",[e._v("配置webpack插件")]),e._v(" "),a("li",[e._v("配置gzip模式")]),e._v(" "),a("li",[e._v("配置webpack-bundle-analyzer，分析打包后生成的文件结构")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var path = require('path')\nvar utils = require('./utils')\nvar webpack = require('webpack')\nvar config = require('../config')\nvar merge = require('webpack-merge')\nvar baseWebpackConfig = require('./webpack.base.conf')\nvar CopyWebpackPlugin = require('copy-webpack-plugin')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n// 抽取css，js文件,与webpack输出的bundle分离\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\nvar OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n\nvar env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : config.build.env\n//合并webpack.base.conf\nvar webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? '#source-map' : false,\n  output: {\n    //配置输出路径\n    path: config.build.assetsRoot,\n    //输出的文件命名格式\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    //未指定文件名的文件的文件名格式\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  //相关插件\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    //压缩js插件\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      },\n      sourceMap: true\n    }),\n    // extract css into its own file\n    //从bundle中抽取css文件\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css')\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    //压缩抽取的css文件\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: {\n        safe: true\n      }\n    }),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    //用于生成dist/index.html，加入hash用于缓存。hash不改变不进行更新\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // split vendor js into its own file\n    //分离第三方js到单独的文件中\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: function (module, count) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      chunks: ['vendor']\n    }),\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n// 配置gzip模式\nif (config.build.productionGzip) {\n  var CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n//配置webpack-bundle-analyzer，分析打包后生成的文件结构\nif (config.build.bundleAnalyzerReport) {\n  var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n")])])]),a("h3",{attrs:{id:"config-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-index-js","aria-hidden":"true"}},[e._v("#")]),e._v(" config/index.js")]),e._v(" "),a("p",[e._v("最后是config中的index.js文件，它都配置了什么")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var path = require('path')\n\nmodule.exports = {\n    //打包时使用的配置\n  build: {\n    //webpack的环境\n    env: require('./prod.env'),\n    //输入的index.html的路径\n    index: path.resolve(__dirname, '../dist/index.html'),\n    //输出的目标文件夹路径\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    //输出的子文件夹路径\n    assetsSubDirectory: 'static',\n    //发布路径\n    assetsPublicPath: '/',\n    //是否使用SourceMap\n    productionSourceMap: true,\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    // 是否开启Gzip\n    productionGzip: false,\n    //Gzip的压缩文件类型\n    productionGzipExtensions: ['js', 'css'],\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  },\n  //开发时使用的配置\n  dev: {\n    //webpack环境\n    env: require('./dev.env'),\n    //端口\n    port: 8080,\n    //是否自动打开浏览器\n    autoOpenBrowser: true,\n    //输出的子文件夹路径\n    assetsSubDirectory: 'static',\n    //发布路径\n    assetsPublicPath: '/',\n    //配置代理表\n    proxyTable: {},\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    cssSourceMap: false\n  }\n}\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("vue-cli给创建vue项目提供了很大的便利。但是同时大量的第三方库的使用，会让打包后的js变的很大，所以还是要熟悉配置,熟悉第三方插件的使用，才可以开发更高效的开发web应用。这里把vue-cli的一些相关内容给自己做一个总结，便于以后查阅。也是希望对其他开发者有帮助。有不足之处请指正。\n最后推荐一下"),a("a",{attrs:{href:"http://www.wheelsfactory.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("轮子工厂"),a("OutboundLink")],1),e._v("--一个分享优秀的vue,angular组件的网站")])])}),[],!1,null,null,null);n.default=s.exports}}]);